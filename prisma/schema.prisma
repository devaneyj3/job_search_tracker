generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id              String        @id @default(uuid()) @db.Uuid
  name            String        @default("NO_NAME")
  address         String?
  city            String?
  state           String?
  zip             String?
  email           String?       @unique
  phone           String?
  emailVerified   DateTime?     @db.Timestamp(6)
  image           String?
  profileComplete Boolean       @default(false)
  createdAt       DateTime      @default(now()) @db.Timestamp(6)
  updatedAt       DateTime      @updatedAt
  accounts        Account[]
  applications    Application[]
  sessions        Session[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Application {
  id                Int          @id @default(autoincrement())
  userId            String       @db.Uuid
  jobTitle          String
  companyName       String
  jobUrl            String
  appliedDate       DateTime?      @default(now()) @db.Timestamp(6)
  status            String?
  statusDate        DateTime?
  archived          Boolean?      @default(false)
  salary            String?
  location          String?
  contactName       String?
  contactEmail      String?
  initialContactDate  DateTime? @default(now()) @db.Timestamp(6)
  secondContactDate DateTime?
  lastContactedDate DateTime?
  initialContactEmailSent   Boolean?      @default(false)
  secondContactEmailSent  Boolean?      @default(false)
  jobDescription    String?
  interviewNotes    String?
  interviewDate     DateTime?
  offerDetails      String?
  rejectionReason   String?
  dateArchived      DateTime?
  notes             String?
  heard_back        Boolean?      @default(false)
  heard_back_date DateTime?
  companyInfoId     Int?         @unique
  createdAt         DateTime     @default(now()) @db.Timestamp(6)
  updatedAt         DateTime     @updatedAt
  companyInfo       CompanyInfo? @relation(fields: [companyInfoId], references: [id])
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([appliedDate])
}

model CompanyInfo {
  id          Int          @id @default(autoincrement())
  industry    String?
  size        String?
  website     String?
  linkedin    String?
  application Application?
}
